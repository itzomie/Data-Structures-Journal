Experiment Number: 2b

Title: Conversion of Infix Expression to Postfix Expression.

Problem Statement: Write a C program to implement the conversion from infix to postfix expression using stack.

Algorithm:

Let, X be an arithmetic expression written in infix notation. This algorithm finds the equivalent postfix expression Y.

1. Push ‘(‘onto Stack, and add ‘)’ to the end of X.
2. Scan X from left to right and repeat Step 3 to 6 for each element of 
      X until the Stack is empty.
3. If an operand is encountered, add it to Y.
4. If a left parenthesis is encountered, push it onto Stack.
5. If an operator is encountered, then:
–	Repeatedly pop from Stack and add to Y each operator (on the top of Stack) which has the same precedence as or higher precedence than operator.
–	Add operator to Stack. 
     [End of If]
6. If a right parenthesis is encountered, then:
           --     Repeatedly pop from Stack and add to Y each operator (on the top 
                      of Stack) until a left parenthesis is encountered.
           --    Remove the left Parenthesis.
               [End of If]
               [End of If]

7. END.


Analysis/Limitations:  
  
There are following limitations of above implementation.
 
1) It supports only 4 binary operators ‘+’, ‘*’, ‘-‘and  ‘/’. It can be extended for more operators by adding more switch cases. 
2) The allowed operands are only single digit operands. The program can be extended for multiple digits by adding a separator like space between all elements (operators and operands) of given expression.
